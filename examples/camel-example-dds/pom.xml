<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.adlinktech.gateway.examples</groupId>
        <artifactId>examples-pom</artifactId>
        <version>3.0.1</version>
    </parent>

    <artifactId>camel-example-dds</artifactId>
    <name>Vortex Gateway example: camel-example-dds</name>

    <dependencies>

        <!-- Gateway's Camel OpensSpliceDDS endpoint -->
        <dependency>
            <groupId>com.adlinktech.gateway</groupId>
            <artifactId>camel-ospl</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- OpensSpliceDDS (requires explicit dependency since it's system scope) -->
        <dependency>
            <groupId>org.opensplice</groupId>
            <artifactId>dcpssaj</artifactId>
        </dependency>

        <!-- Use logback as SLF4J backend for logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Other dependencies used by the routes -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stream</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-groovy</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xstream</artifactId>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <!-- OpenSplice IDL compilation plugin -->
            <plugin>
                <groupId>com.adlinktech.gateway</groupId>
                <artifactId>opensplice-idl-plugin</artifactId>
                <version>${project.version}</version>
                <executions>
                    <execution>
                        <!-- call 'idl-compile' goal during 'generate-sources' phase -->
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>idl-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Allows the example to be run via
                 'mvn compile exec:java -P{target.main.class}' -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${target.main.class}</mainClass>
                    <includePluginDependencies>false</includePluginDependencies>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>SimpleRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with simple route -->
                <target.main.class>SimpleRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>MulticastRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with multicast route -->
                <target.main.class>MulticastRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>DataTransformRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with data transform route -->
                <target.main.class>DataTransformRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>FilterRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with filter route -->
                <target.main.class>FilterRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>GroovyFilterRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with Groovy filter route -->
                <target.main.class>GroovyFilterRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>SampleRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with Sample route -->
                <target.main.class>SampleRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>ContentBasedRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with Content based route -->
                <target.main.class>ContentBasedRoute</target.main.class>
            </properties>
        </profile>
        <profile>
            <id>DynamicPollEnricherRoute</id>
            <properties>
                <!-- Starting the camel-example-dds example with DynamicPollEnricher route -->
                <target.main.class>DynamicPollEnricherRoute</target.main.class>
            </properties>
        </profile>
    </profiles>

</project>
